/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * This API provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExtensionObject } from './ExtensionObject';
import {
    ExtensionObjectFromJSON,
    ExtensionObjectFromJSONTyped,
    ExtensionObjectToJSON,
} from './ExtensionObject';
import type { HistoryReadValueId } from './HistoryReadValueId';
import {
    HistoryReadValueIdFromJSON,
    HistoryReadValueIdFromJSONTyped,
    HistoryReadValueIdToJSON,
} from './HistoryReadValueId';
import type { RequestHeader } from './RequestHeader';
import {
    RequestHeaderFromJSON,
    RequestHeaderFromJSONTyped,
    RequestHeaderToJSON,
} from './RequestHeader';

/**
 * 
 * @export
 * @interface HistoryReadRequest
 */
export interface HistoryReadRequest {
    /**
     * 
     * @type {RequestHeader}
     * @memberof HistoryReadRequest
     */
    RequestHeader?: RequestHeader;
    /**
     * 
     * @type {ExtensionObject}
     * @memberof HistoryReadRequest
     */
    HistoryReadDetails?: ExtensionObject;
    /**
     * 
     * @type {number}
     * @memberof HistoryReadRequest
     */
    TimestampsToReturn?: number;
    /**
     * 
     * @type {boolean}
     * @memberof HistoryReadRequest
     */
    ReleaseContinuationPoints?: boolean;
    /**
     * 
     * @type {Array<HistoryReadValueId>}
     * @memberof HistoryReadRequest
     */
    NodesToRead?: Array<HistoryReadValueId>;
}

/**
 * Check if a given object implements the HistoryReadRequest interface.
 */
export function instanceOfHistoryReadRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HistoryReadRequestFromJSON(json: any): HistoryReadRequest {
    return HistoryReadRequestFromJSONTyped(json, false);
}

export function HistoryReadRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): HistoryReadRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'RequestHeader': !exists(json, 'RequestHeader') ? undefined : RequestHeaderFromJSON(json['RequestHeader']),
        'HistoryReadDetails': !exists(json, 'HistoryReadDetails') ? undefined : ExtensionObjectFromJSON(json['HistoryReadDetails']),
        'TimestampsToReturn': !exists(json, 'TimestampsToReturn') ? undefined : json['TimestampsToReturn'],
        'ReleaseContinuationPoints': !exists(json, 'ReleaseContinuationPoints') ? undefined : json['ReleaseContinuationPoints'],
        'NodesToRead': !exists(json, 'NodesToRead') ? undefined : ((json['NodesToRead'] as Array<any>).map(HistoryReadValueIdFromJSON)),
    };
}

export function HistoryReadRequestToJSON(value?: HistoryReadRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'RequestHeader': RequestHeaderToJSON(value.RequestHeader),
        'HistoryReadDetails': ExtensionObjectToJSON(value.HistoryReadDetails),
        'TimestampsToReturn': value.TimestampsToReturn,
        'ReleaseContinuationPoints': value.ReleaseContinuationPoints,
        'NodesToRead': value.NodesToRead === undefined ? undefined : ((value.NodesToRead as Array<any>).map(HistoryReadValueIdToJSON)),
    };
}


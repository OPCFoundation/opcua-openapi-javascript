/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * This API provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DiagnosticInfo } from './DiagnosticInfo';
import {
    DiagnosticInfoFromJSON,
    DiagnosticInfoFromJSONTyped,
    DiagnosticInfoToJSON,
} from './DiagnosticInfo';
import type { ExtensionObject } from './ExtensionObject';
import {
    ExtensionObjectFromJSON,
    ExtensionObjectFromJSONTyped,
    ExtensionObjectToJSON,
} from './ExtensionObject';

/**
 * 
 * @export
 * @interface ResponseHeader
 */
export interface ResponseHeader {
    /**
     * 
     * @type {Date}
     * @memberof ResponseHeader
     */
    Timestamp?: Date;
    /**
     * 
     * @type {number}
     * @memberof ResponseHeader
     */
    RequestHandle?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseHeader
     */
    ServiceResult?: number;
    /**
     * 
     * @type {DiagnosticInfo}
     * @memberof ResponseHeader
     */
    ServiceDiagnostics?: DiagnosticInfo;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseHeader
     */
    StringTable?: Array<string>;
    /**
     * 
     * @type {ExtensionObject}
     * @memberof ResponseHeader
     */
    AdditionalHeader?: ExtensionObject;
}

/**
 * Check if a given object implements the ResponseHeader interface.
 */
export function instanceOfResponseHeader(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResponseHeaderFromJSON(json: any): ResponseHeader {
    return ResponseHeaderFromJSONTyped(json, false);
}

export function ResponseHeaderFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseHeader {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'Timestamp': !exists(json, 'Timestamp') ? undefined : (new Date(json['Timestamp'])),
        'RequestHandle': !exists(json, 'RequestHandle') ? undefined : json['RequestHandle'],
        'ServiceResult': !exists(json, 'ServiceResult') ? undefined : json['ServiceResult'],
        'ServiceDiagnostics': !exists(json, 'ServiceDiagnostics') ? undefined : DiagnosticInfoFromJSON(json['ServiceDiagnostics']),
        'StringTable': !exists(json, 'StringTable') ? undefined : json['StringTable'],
        'AdditionalHeader': !exists(json, 'AdditionalHeader') ? undefined : ExtensionObjectFromJSON(json['AdditionalHeader']),
    };
}

export function ResponseHeaderToJSON(value?: ResponseHeader | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Timestamp': value.Timestamp === undefined ? undefined : (value.Timestamp.toISOString()),
        'RequestHandle': value.RequestHandle,
        'ServiceResult': value.ServiceResult,
        'ServiceDiagnostics': DiagnosticInfoToJSON(value.ServiceDiagnostics),
        'StringTable': value.StringTable,
        'AdditionalHeader': ExtensionObjectToJSON(value.AdditionalHeader),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * This API provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventFilter } from './EventFilter';
import {
    EventFilterFromJSON,
    EventFilterFromJSONTyped,
    EventFilterToJSON,
} from './EventFilter';
import type { HistoryEventFieldList } from './HistoryEventFieldList';
import {
    HistoryEventFieldListFromJSON,
    HistoryEventFieldListFromJSONTyped,
    HistoryEventFieldListToJSON,
} from './HistoryEventFieldList';

/**
 * 
 * @export
 * @interface UpdateEventDetails
 */
export interface UpdateEventDetails {
    /**
     * 
     * @type {string}
     * @memberof UpdateEventDetails
     */
    NodeId?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateEventDetails
     */
    PerformInsertReplace?: number;
    /**
     * 
     * @type {EventFilter}
     * @memberof UpdateEventDetails
     */
    Filter?: EventFilter;
    /**
     * 
     * @type {Array<HistoryEventFieldList>}
     * @memberof UpdateEventDetails
     */
    EventData?: Array<HistoryEventFieldList>;
}

/**
 * Check if a given object implements the UpdateEventDetails interface.
 */
export function instanceOfUpdateEventDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateEventDetailsFromJSON(json: any): UpdateEventDetails {
    return UpdateEventDetailsFromJSONTyped(json, false);
}

export function UpdateEventDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateEventDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'NodeId': !exists(json, 'NodeId') ? undefined : json['NodeId'],
        'PerformInsertReplace': !exists(json, 'PerformInsertReplace') ? undefined : json['PerformInsertReplace'],
        'Filter': !exists(json, 'Filter') ? undefined : EventFilterFromJSON(json['Filter']),
        'EventData': !exists(json, 'EventData') ? undefined : ((json['EventData'] as Array<any>).map(HistoryEventFieldListFromJSON)),
    };
}

export function UpdateEventDetailsToJSON(value?: UpdateEventDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'NodeId': value.NodeId,
        'PerformInsertReplace': value.PerformInsertReplace,
        'Filter': EventFilterToJSON(value.Filter),
        'EventData': value.EventData === undefined ? undefined : ((value.EventData as Array<any>).map(HistoryEventFieldListToJSON)),
    };
}


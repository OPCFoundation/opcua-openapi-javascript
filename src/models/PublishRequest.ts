/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SubscriptionAcknowledgement } from './SubscriptionAcknowledgement';
import {
    SubscriptionAcknowledgementFromJSON,
    SubscriptionAcknowledgementFromJSONTyped,
    SubscriptionAcknowledgementToJSON,
    SubscriptionAcknowledgementToJSONTyped,
} from './SubscriptionAcknowledgement';
import type { RequestHeader } from './RequestHeader';
import {
    RequestHeaderFromJSON,
    RequestHeaderFromJSONTyped,
    RequestHeaderToJSON,
    RequestHeaderToJSONTyped,
} from './RequestHeader';

/**
 * 
 * @export
 * @interface PublishRequest
 */
export interface PublishRequest {
    /**
     * 
     * @type {RequestHeader}
     * @memberof PublishRequest
     */
    RequestHeader?: RequestHeader;
    /**
     * 
     * @type {Array<SubscriptionAcknowledgement>}
     * @memberof PublishRequest
     */
    SubscriptionAcknowledgements?: Array<SubscriptionAcknowledgement>;
    /**
     * 
     * @type {string}
     * @memberof PublishRequest
     */
    UaTypeId?: string;
}

/**
 * Check if a given object implements the PublishRequest interface.
 */
export function instanceOfPublishRequest(value: object): value is PublishRequest {
    return true;
}

export function PublishRequestFromJSON(json: any): PublishRequest {
    return PublishRequestFromJSONTyped(json, false);
}

export function PublishRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublishRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'RequestHeader': json['RequestHeader'] == null ? undefined : RequestHeaderFromJSON(json['RequestHeader']),
        'SubscriptionAcknowledgements': json['SubscriptionAcknowledgements'] == null ? undefined : ((json['SubscriptionAcknowledgements'] as Array<any>).map(SubscriptionAcknowledgementFromJSON)),
        'UaTypeId': json['UaTypeId'] == null ? undefined : json['UaTypeId'],
    };
}

  export function PublishRequestToJSON(json: any): PublishRequest {
      return PublishRequestToJSONTyped(json, false);
  }

  export function PublishRequestToJSONTyped(value?: PublishRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'RequestHeader': RequestHeaderToJSON(value['RequestHeader']),
        'SubscriptionAcknowledgements': value['SubscriptionAcknowledgements'] == null ? undefined : ((value['SubscriptionAcknowledgements'] as Array<any>).map(SubscriptionAcknowledgementToJSON)),
        'UaTypeId': value['UaTypeId'],
    };
}


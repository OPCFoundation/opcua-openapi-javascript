/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * This API provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnumDescription } from './EnumDescription';
import {
    EnumDescriptionFromJSON,
    EnumDescriptionFromJSONTyped,
    EnumDescriptionToJSON,
} from './EnumDescription';
import type { SimpleTypeDescription } from './SimpleTypeDescription';
import {
    SimpleTypeDescriptionFromJSON,
    SimpleTypeDescriptionFromJSONTyped,
    SimpleTypeDescriptionToJSON,
} from './SimpleTypeDescription';
import type { StructureDescription } from './StructureDescription';
import {
    StructureDescriptionFromJSON,
    StructureDescriptionFromJSONTyped,
    StructureDescriptionToJSON,
} from './StructureDescription';

/**
 * 
 * @export
 * @interface DataTypeSchemaHeader
 */
export interface DataTypeSchemaHeader {
    /**
     * 
     * @type {Array<string>}
     * @memberof DataTypeSchemaHeader
     */
    Namespaces?: Array<string>;
    /**
     * 
     * @type {Array<StructureDescription>}
     * @memberof DataTypeSchemaHeader
     */
    StructureDataTypes?: Array<StructureDescription>;
    /**
     * 
     * @type {Array<EnumDescription>}
     * @memberof DataTypeSchemaHeader
     */
    EnumDataTypes?: Array<EnumDescription>;
    /**
     * 
     * @type {Array<SimpleTypeDescription>}
     * @memberof DataTypeSchemaHeader
     */
    SimpleDataTypes?: Array<SimpleTypeDescription>;
}

/**
 * Check if a given object implements the DataTypeSchemaHeader interface.
 */
export function instanceOfDataTypeSchemaHeader(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DataTypeSchemaHeaderFromJSON(json: any): DataTypeSchemaHeader {
    return DataTypeSchemaHeaderFromJSONTyped(json, false);
}

export function DataTypeSchemaHeaderFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataTypeSchemaHeader {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'Namespaces': !exists(json, 'Namespaces') ? undefined : json['Namespaces'],
        'StructureDataTypes': !exists(json, 'StructureDataTypes') ? undefined : ((json['StructureDataTypes'] as Array<any>).map(StructureDescriptionFromJSON)),
        'EnumDataTypes': !exists(json, 'EnumDataTypes') ? undefined : ((json['EnumDataTypes'] as Array<any>).map(EnumDescriptionFromJSON)),
        'SimpleDataTypes': !exists(json, 'SimpleDataTypes') ? undefined : ((json['SimpleDataTypes'] as Array<any>).map(SimpleTypeDescriptionFromJSON)),
    };
}

export function DataTypeSchemaHeaderToJSON(value?: DataTypeSchemaHeader | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Namespaces': value.Namespaces,
        'StructureDataTypes': value.StructureDataTypes === undefined ? undefined : ((value.StructureDataTypes as Array<any>).map(StructureDescriptionToJSON)),
        'EnumDataTypes': value.EnumDataTypes === undefined ? undefined : ((value.EnumDataTypes as Array<any>).map(EnumDescriptionToJSON)),
        'SimpleDataTypes': value.SimpleDataTypes === undefined ? undefined : ((value.SimpleDataTypes as Array<any>).map(SimpleTypeDescriptionToJSON)),
    };
}


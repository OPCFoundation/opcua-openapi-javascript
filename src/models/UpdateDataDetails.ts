/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * This API provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DataValue } from './DataValue';
import {
    DataValueFromJSON,
    DataValueFromJSONTyped,
    DataValueToJSON,
} from './DataValue';

/**
 * 
 * @export
 * @interface UpdateDataDetails
 */
export interface UpdateDataDetails {
    /**
     * 
     * @type {string}
     * @memberof UpdateDataDetails
     */
    NodeId?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateDataDetails
     */
    PerformInsertReplace?: number;
    /**
     * 
     * @type {Array<DataValue>}
     * @memberof UpdateDataDetails
     */
    UpdateValues?: Array<DataValue>;
}

/**
 * Check if a given object implements the UpdateDataDetails interface.
 */
export function instanceOfUpdateDataDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateDataDetailsFromJSON(json: any): UpdateDataDetails {
    return UpdateDataDetailsFromJSONTyped(json, false);
}

export function UpdateDataDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateDataDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'NodeId': !exists(json, 'NodeId') ? undefined : json['NodeId'],
        'PerformInsertReplace': !exists(json, 'PerformInsertReplace') ? undefined : json['PerformInsertReplace'],
        'UpdateValues': !exists(json, 'UpdateValues') ? undefined : ((json['UpdateValues'] as Array<any>).map(DataValueFromJSON)),
    };
}

export function UpdateDataDetailsToJSON(value?: UpdateDataDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'NodeId': value.NodeId,
        'PerformInsertReplace': value.PerformInsertReplace,
        'UpdateValues': value.UpdateValues === undefined ? undefined : ((value.UpdateValues as Array<any>).map(DataValueToJSON)),
    };
}


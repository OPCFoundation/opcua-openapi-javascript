/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * This API provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NotificationMessage } from './NotificationMessage';
import {
    NotificationMessageFromJSON,
    NotificationMessageFromJSONTyped,
    NotificationMessageToJSON,
} from './NotificationMessage';
import type { ResponseHeader } from './ResponseHeader';
import {
    ResponseHeaderFromJSON,
    ResponseHeaderFromJSONTyped,
    ResponseHeaderToJSON,
} from './ResponseHeader';

/**
 * 
 * @export
 * @interface RepublishResponse
 */
export interface RepublishResponse {
    /**
     * 
     * @type {ResponseHeader}
     * @memberof RepublishResponse
     */
    ResponseHeader?: ResponseHeader;
    /**
     * 
     * @type {NotificationMessage}
     * @memberof RepublishResponse
     */
    NotificationMessage?: NotificationMessage;
}

/**
 * Check if a given object implements the RepublishResponse interface.
 */
export function instanceOfRepublishResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RepublishResponseFromJSON(json: any): RepublishResponse {
    return RepublishResponseFromJSONTyped(json, false);
}

export function RepublishResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RepublishResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ResponseHeader': !exists(json, 'ResponseHeader') ? undefined : ResponseHeaderFromJSON(json['ResponseHeader']),
        'NotificationMessage': !exists(json, 'NotificationMessage') ? undefined : NotificationMessageFromJSON(json['NotificationMessage']),
    };
}

export function RepublishResponseToJSON(value?: RepublishResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ResponseHeader': ResponseHeaderToJSON(value.ResponseHeader),
        'NotificationMessage': NotificationMessageToJSON(value.NotificationMessage),
    };
}


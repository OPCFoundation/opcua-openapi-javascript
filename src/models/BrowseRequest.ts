/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * This API provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BrowseDescription } from './BrowseDescription';
import {
    BrowseDescriptionFromJSON,
    BrowseDescriptionFromJSONTyped,
    BrowseDescriptionToJSON,
} from './BrowseDescription';
import type { RequestHeader } from './RequestHeader';
import {
    RequestHeaderFromJSON,
    RequestHeaderFromJSONTyped,
    RequestHeaderToJSON,
} from './RequestHeader';
import type { ViewDescription } from './ViewDescription';
import {
    ViewDescriptionFromJSON,
    ViewDescriptionFromJSONTyped,
    ViewDescriptionToJSON,
} from './ViewDescription';

/**
 * 
 * @export
 * @interface BrowseRequest
 */
export interface BrowseRequest {
    /**
     * 
     * @type {RequestHeader}
     * @memberof BrowseRequest
     */
    RequestHeader?: RequestHeader;
    /**
     * 
     * @type {ViewDescription}
     * @memberof BrowseRequest
     */
    View?: ViewDescription;
    /**
     * 
     * @type {number}
     * @memberof BrowseRequest
     */
    RequestedMaxReferencesPerNode?: number;
    /**
     * 
     * @type {Array<BrowseDescription>}
     * @memberof BrowseRequest
     */
    NodesToBrowse?: Array<BrowseDescription>;
}

/**
 * Check if a given object implements the BrowseRequest interface.
 */
export function instanceOfBrowseRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BrowseRequestFromJSON(json: any): BrowseRequest {
    return BrowseRequestFromJSONTyped(json, false);
}

export function BrowseRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BrowseRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'RequestHeader': !exists(json, 'RequestHeader') ? undefined : RequestHeaderFromJSON(json['RequestHeader']),
        'View': !exists(json, 'View') ? undefined : ViewDescriptionFromJSON(json['View']),
        'RequestedMaxReferencesPerNode': !exists(json, 'RequestedMaxReferencesPerNode') ? undefined : json['RequestedMaxReferencesPerNode'],
        'NodesToBrowse': !exists(json, 'NodesToBrowse') ? undefined : ((json['NodesToBrowse'] as Array<any>).map(BrowseDescriptionFromJSON)),
    };
}

export function BrowseRequestToJSON(value?: BrowseRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'RequestHeader': RequestHeaderToJSON(value.RequestHeader),
        'View': ViewDescriptionToJSON(value.View),
        'RequestedMaxReferencesPerNode': value.RequestedMaxReferencesPerNode,
        'NodesToBrowse': value.NodesToBrowse === undefined ? undefined : ((value.NodesToBrowse as Array<any>).map(BrowseDescriptionToJSON)),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * This API provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationDescription } from './ApplicationDescription';
import {
    ApplicationDescriptionFromJSON,
    ApplicationDescriptionFromJSONTyped,
    ApplicationDescriptionToJSON,
} from './ApplicationDescription';
import type { ResponseHeader } from './ResponseHeader';
import {
    ResponseHeaderFromJSON,
    ResponseHeaderFromJSONTyped,
    ResponseHeaderToJSON,
} from './ResponseHeader';

/**
 * 
 * @export
 * @interface FindServersResponse
 */
export interface FindServersResponse {
    /**
     * 
     * @type {ResponseHeader}
     * @memberof FindServersResponse
     */
    ResponseHeader?: ResponseHeader;
    /**
     * 
     * @type {Array<ApplicationDescription>}
     * @memberof FindServersResponse
     */
    Servers?: Array<ApplicationDescription>;
}

/**
 * Check if a given object implements the FindServersResponse interface.
 */
export function instanceOfFindServersResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FindServersResponseFromJSON(json: any): FindServersResponse {
    return FindServersResponseFromJSONTyped(json, false);
}

export function FindServersResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): FindServersResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ResponseHeader': !exists(json, 'ResponseHeader') ? undefined : ResponseHeaderFromJSON(json['ResponseHeader']),
        'Servers': !exists(json, 'Servers') ? undefined : ((json['Servers'] as Array<any>).map(ApplicationDescriptionFromJSON)),
    };
}

export function FindServersResponseToJSON(value?: FindServersResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ResponseHeader': ResponseHeaderToJSON(value.ResponseHeader),
        'Servers': value.Servers === undefined ? undefined : ((value.Servers as Array<any>).map(ApplicationDescriptionToJSON)),
    };
}


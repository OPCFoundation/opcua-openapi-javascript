/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA Web API
 * This API provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RequestHeader } from './RequestHeader';
import {
    RequestHeaderFromJSON,
    RequestHeaderFromJSONTyped,
    RequestHeaderToJSON,
} from './RequestHeader';

/**
 * 
 * @export
 * @interface CreateSubscriptionRequest
 */
export interface CreateSubscriptionRequest {
    /**
     * 
     * @type {RequestHeader}
     * @memberof CreateSubscriptionRequest
     */
    RequestHeader?: RequestHeader;
    /**
     * 
     * @type {number}
     * @memberof CreateSubscriptionRequest
     */
    RequestedPublishingInterval?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateSubscriptionRequest
     */
    RequestedLifetimeCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateSubscriptionRequest
     */
    RequestedMaxKeepAliveCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateSubscriptionRequest
     */
    MaxNotificationsPerPublish?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateSubscriptionRequest
     */
    PublishingEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateSubscriptionRequest
     */
    Priority?: number;
}

/**
 * Check if a given object implements the CreateSubscriptionRequest interface.
 */
export function instanceOfCreateSubscriptionRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreateSubscriptionRequestFromJSON(json: any): CreateSubscriptionRequest {
    return CreateSubscriptionRequestFromJSONTyped(json, false);
}

export function CreateSubscriptionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateSubscriptionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'RequestHeader': !exists(json, 'RequestHeader') ? undefined : RequestHeaderFromJSON(json['RequestHeader']),
        'RequestedPublishingInterval': !exists(json, 'RequestedPublishingInterval') ? undefined : json['RequestedPublishingInterval'],
        'RequestedLifetimeCount': !exists(json, 'RequestedLifetimeCount') ? undefined : json['RequestedLifetimeCount'],
        'RequestedMaxKeepAliveCount': !exists(json, 'RequestedMaxKeepAliveCount') ? undefined : json['RequestedMaxKeepAliveCount'],
        'MaxNotificationsPerPublish': !exists(json, 'MaxNotificationsPerPublish') ? undefined : json['MaxNotificationsPerPublish'],
        'PublishingEnabled': !exists(json, 'PublishingEnabled') ? undefined : json['PublishingEnabled'],
        'Priority': !exists(json, 'Priority') ? undefined : json['Priority'],
    };
}

export function CreateSubscriptionRequestToJSON(value?: CreateSubscriptionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'RequestHeader': RequestHeaderToJSON(value.RequestHeader),
        'RequestedPublishingInterval': value.RequestedPublishingInterval,
        'RequestedLifetimeCount': value.RequestedLifetimeCount,
        'RequestedMaxKeepAliveCount': value.RequestedMaxKeepAliveCount,
        'MaxNotificationsPerPublish': value.MaxNotificationsPerPublish,
        'PublishingEnabled': value.PublishingEnabled,
        'Priority': value.Priority,
    };
}

